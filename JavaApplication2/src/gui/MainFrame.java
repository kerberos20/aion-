package gui;

import io.FolderUtils;
import io.Datapack;
import io.RePacker;
import java.awt.Cursor;
import java.awt.Component;
import java.awt.GraphicsEnvironment;
import java.awt.GraphicsDevice;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.exec.CommandLine;
import org.apache.commons.exec.DefaultExecutor;
import org.apache.commons.exec.PumpStreamHandler;

/**
 *
 * @author kerbe_000
 */
public class MainFrame extends JFrame {

    static List<String> _pakfiles;

    /**
     * Creates new form MainFrame
     */
    protected MainFrame() {
        init();

    }

    private void init() {
        initComponents();
        _bar1.setEnabled(false);
        _bar1.setVisible(false);
        _bar1.setStringPainted(true);
        _bar1.setMinimum(0);
        _bar1.setMaximum(100);

        setWindowPosition(this, 1);
        this.setVisible(true);

    }

    public static MainFrame getInstance() {
        try {
            UIManager.setLookAndFeel("skin.BaseLookAndFeel");

        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return SingletonHolder.INSTANCE;
    }

    private static class SingletonHolder {

        protected static final MainFrame INSTANCE = new MainFrame();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        AionPath = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        _bar1 = new javax.swing.JProgressBar();
        jButton3 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        Options = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Aion + (v0.1)");
        setResizable(false);

        jButton1.setText("Change");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        AionPath.enableInputMethods(false);
        AionPath.setEditable(false);
        if (FolderUtils.getAionPathFromRegistry())
        AionPath.setText(FolderUtils.getAionPath().toString());
        else
        AionPath.setText("Aion couldnt be located");
        AionPath.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        AionPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AionPathActionPerformed(evt);
            }
        });

        jButton2.setText("Launch Aion");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        _bar1.setForeground(new java.awt.Color(0, 51, 204));
        _bar1.setAutoscrolls(true);
        _bar1.setBorderPainted(false);
        _bar1.setDoubleBuffered(true);
        _bar1.setName(""); // NOI18N
        _bar1.setStringPainted(true);

        jButton3.setText("Remodel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextField1.enableInputMethods(false);
        jTextField1.setEditable(false);
        String language = FolderUtils.getAionLanguage();
        if (language.contains("eng"))
        jTextField1.setText("EU - English language detected");
        else if (language.contains("enu"))
        jTextField1.setText("US - English language detected");
        else if (language.contains("deu"))
        jTextField1.setText("EU - Deutsch language detected");
        else if (language.contains("esn"))
        jTextField1.setText("EU - Spanish language detected");
        else if (language.contains("fra"))
        jTextField1.setText("EU - French language detected");
        else if (language.contains("ita"))
        jTextField1.setText("EU - Italian language detected");
        else if (language.contains("plk"))
        jTextField1.setText("EU - Polish language detected");
        else if (language.contains("trk"))
        jTextField1.setText("EU - Turkish language detected");
        else
        jTextField1.setText("unknown language");

        Options.setText("Options");
        Options.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptionsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(_bar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AionPath, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(Options, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Options))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(69, 69, 69)
                .addComponent(_bar1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AionPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setDialogTitle("Open Aion Folder");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setFileHidingEnabled(true);
        FileFilter filter = new FileNameExtensionFilter("Aion Download Folder", "dat");
        fileChooser.setFileFilter(filter);
        if (FolderUtils.getAionPathFromRegistry()) {
            fileChooser.setCurrentDirectory(new File(FolderUtils.getAionPath().toString()));
        } else {
            fileChooser.setCurrentDirectory(new File("c:"));
        }

        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {

            // check for FileInfoMap_AION-LIVE.dat
            String list = "\\FileInfoMap_AION-LIVE.dat";
            File selectedFile = fileChooser.getSelectedFile();
            String path = selectedFile.getPath();
            File f = new File(path + list);
            if (f.exists()) {
                FolderUtils.setAionPath(FileSystems.getDefault().getPath(path+"\\"));
                this.AionPath.setText(FolderUtils.getAionPath().toString());
            } else if (path.toLowerCase().contains("aion")) {
                f = new File(path + "\\download" + list);
                if (f.exists()) {
                    FolderUtils.setAionPath(FileSystems.getDefault().getPath(path + "\\download\\"));
                    this.AionPath.setText(FolderUtils.getAionPath().toString());
                } else {
                    // show some error popup
                }
            } else {
                // show some error popup
            }

            System.out.println("Selected file: " + selectedFile.getAbsolutePath());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (FolderUtils.getAionPath() != null) {
            String command = " -ip:79.110.83.80 -noweb -noauthgg -st -charnamemenu -ingamebrowser -webshopevent:6 -f2p -lbox -litelauncher -ncping -nosatab /SessKey:\"\" /CompanyID:\"11\" /ChannelGroupIndex:\"-1\"  -lang:ENG -litestep:9 ";
            try {
                ByteArrayOutputStream stdout = new ByteArrayOutputStream();
                PumpStreamHandler psh = new PumpStreamHandler(stdout);
                DefaultExecutor exec = new DefaultExecutor();
                exec.setStreamHandler(psh);
                this.setVisible(false);
                exec.execute(CommandLine.parse("cmd.exe /c wmic OS get OSArchitecture"));
                int exit;
                exec.setExitValues(new int[]{0, 1});
                if (stdout.toString().contains("64")) {
                    exit = exec.execute(CommandLine.parse(FolderUtils.getAionPath().toString() + "\\bin64\\aion.bin" + command));
                } else {
                    exit = exec.execute(CommandLine.parse(FolderUtils.getAionPath().toString() + "\\bin32\\aion.bin" + command));
                }

                this.setVisible(true);

                System.out.println(exit);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void AionPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AionPathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AionPathActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Runnable runner = () -> {
            try {
                // TODO use options
                this.jButton1.setEnabled(false);
                this.jButton2.setEnabled(false);
                this.jButton3.setEnabled(false);
                this.Options.setEnabled(false);
                for (Component c : this.getComponents()) {
                    c.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                }

                // Decode all pak files
                RePacker.start();

                // refactor data.pak
                Datapack.start();
                
                // Extract all encoded XML files
                List<String> _unpakfiles = io.UnZipFiles.Start(_pakfiles, true, false);
                
                // Decode all XML files
                io.Convert.Start(_unpakfiles);

                // zip back plain XML and HTML files
                io.ZipFiles.start(_unpakfiles);

                this.jButton1.setEnabled(true);
                this.jButton2.setEnabled(true);
                this.jButton3.setEnabled(true);
                this.Options.setEnabled(true);

                for (Component c : this.getComponents()) {
                    c.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }
            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        };
        Thread t = new Thread(runner, "Code Executer");
        //t.run();
        t.start();


    }//GEN-LAST:event_jButton3ActionPerformed

    private void OptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptionsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OptionsActionPerformed

    private static void setWindowPosition(JFrame window, int screen) {
        GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice[] allDevices = env.getScreenDevices();
        int topLeftX, topLeftY, screenX, screenY, windowPosX, windowPosY;

        if (screen < allDevices.length && screen > -1) {
            topLeftX = allDevices[screen].getDefaultConfiguration().getBounds().x;
            topLeftY = allDevices[screen].getDefaultConfiguration().getBounds().y;

            screenX = allDevices[screen].getDefaultConfiguration().getBounds().width;
            screenY = allDevices[screen].getDefaultConfiguration().getBounds().height;
        } else {
            topLeftX = allDevices[0].getDefaultConfiguration().getBounds().x;
            topLeftY = allDevices[0].getDefaultConfiguration().getBounds().y;

            screenX = allDevices[0].getDefaultConfiguration().getBounds().width;
            screenY = allDevices[0].getDefaultConfiguration().getBounds().height;
        }

        windowPosX = ((screenX - window.getWidth()) / 2) + topLeftX;
        windowPosY = ((screenY - window.getHeight()) / 2) + topLeftY;

        window.setLocation(windowPosX, windowPosY);

    }

    public void updateBar1(final String text, final int value) {
        if (!this._bar1.isVisible()) {
            this._bar1.setVisible(true);
        }

        if (!this._bar1.getString().equals(text)) {
            this._bar1.setString(text + " : " + value + "%");
        }

        if (this._bar1.getValue() != value) {
            this._bar1.setValue(value);
        }

    }

    public static void setPakFiles(List<String> files) {
        _pakfiles = files;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AionPath;
    private javax.swing.JButton Options;
    private javax.swing.JProgressBar _bar1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    public static void main(String[] args) throws IOException, InterruptedException {

        getInstance();
    }
}
